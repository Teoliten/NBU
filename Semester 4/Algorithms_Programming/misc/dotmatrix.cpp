#include <bits/stdc++.h>

using namespace std;

class DotMatrixPrinter
{
public:
  char convertToChar(string input, int index);
  string covertToHorizontal(string input);
  void printVertical(string input);
  void printHorizontal(string input);

private:
  vector<vector<int>> letters = {
      // A
      {0, 1, 1, 1, 1, 0,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 1, 1, 1, 1, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1},
      // B
      {1, 1, 1, 1, 1, 0,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 1, 1, 1, 1, 0,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 1, 1, 1, 1, 0},
      // C
      {0, 1, 1, 1, 1, 0,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 0,
       1, 0, 0, 0, 0, 0,
       1, 0, 0, 0, 0, 0,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       0, 1, 1, 1, 1, 0},
      // D
      {1, 1, 1, 1, 0, 0,
       1, 0, 0, 0, 1, 0,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 1, 0,
       1, 1, 1, 1, 0, 0},
      // E
      {1, 1, 1, 1, 1, 1,
       1, 0, 0, 0, 0, 0,
       1, 0, 0, 0, 0, 0,
       1, 1, 1, 1, 1, 0,
       1, 0, 0, 0, 0, 0,
       1, 0, 0, 0, 0, 0,
       1, 0, 0, 0, 0, 0,
       1, 1, 1, 1, 1, 1},
      // F
      {1, 1, 1, 1, 1, 1,
       1, 0, 0, 0, 0, 0,
       1, 0, 0, 0, 0, 0,
       1, 1, 1, 1, 1, 0,
       1, 0, 0, 0, 0, 0,
       1, 0, 0, 0, 0, 0,
       1, 0, 0, 0, 0, 0,
       1, 0, 0, 0, 0, 0},
      // G
      {0, 1, 1, 1, 1, 0,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 0,
       1, 0, 0, 0, 0, 0,
       1, 0, 0, 1, 1, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       0, 1, 1, 1, 1, 0},
      // H
      {1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 1, 1, 1, 1, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1},
      // I
      {1, 1, 1, 1, 1, 1,
       0, 0, 1, 1, 0, 0,
       0, 0, 1, 1, 0, 0,
       0, 0, 1, 1, 0, 0,
       0, 0, 1, 1, 0, 0,
       0, 0, 1, 1, 0, 0,
       0, 0, 1, 1, 0, 0,
       1, 1, 1, 1, 1, 1},
      // J
      {1, 1, 1, 1, 1, 1,
       0, 0, 0, 1, 1, 0,
       0, 0, 0, 1, 1, 0,
       0, 0, 0, 1, 1, 0,
       0, 0, 0, 1, 1, 0,
       0, 0, 0, 1, 1, 0,
       1, 0, 0, 1, 1, 0,
       1, 1, 1, 1, 0, 0},
      // K
      {1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 1, 0,
       1, 0, 0, 1, 0, 0,
       1, 0, 1, 0, 0, 0,
       1, 1, 0, 0, 0, 0,
       1, 0, 1, 0, 0, 0,
       1, 0, 0, 1, 0, 0,
       1, 0, 0, 0, 1, 0,
       1, 0, 0, 0, 0, 1},
      // L
      {1, 0, 0, 0, 0, 0,
       1, 0, 0, 0, 0, 0,
       1, 0, 0, 0, 0, 0,
       1, 0, 0, 0, 0, 0,
       1, 0, 0, 0, 0, 0,
       1, 0, 0, 0, 0, 0,
       1, 0, 0, 0, 0, 1,
       1, 1, 1, 1, 1, 1},
      // M
      {1, 0, 0, 0, 0, 1,
       1, 1, 0, 0, 1, 1,
       1, 0, 1, 1, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1},
      // N
      {1, 0, 0, 0, 0, 1,
       1, 1, 0, 0, 0, 1,
       1, 0, 1, 0, 0, 1,
       1, 0, 0, 1, 0, 1,
       1, 0, 0, 0, 1, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1},
      // O
      {0, 1, 1, 1, 1, 0,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       0, 1, 1, 1, 1, 0},
      // P
      {1, 1, 1, 1, 1, 0,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 1, 1, 1, 1, 0,
       1, 0, 0, 0, 0, 0,
       1, 0, 0, 0, 0, 0,
       1, 0, 0, 0, 0, 0,
       1, 0, 0, 0, 0, 0},
      // Q
      {0, 1, 1, 1, 1, 0,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 1, 0, 0, 1,
       1, 0, 0, 1, 0, 1,
       0, 1, 1, 1, 1, 0,
       0, 0, 0, 0, 1, 1},
      // R
      {1, 1, 1, 1, 1, 0,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 1, 1, 1, 1, 0,
       1, 0, 1, 0, 0, 0,
       1, 0, 0, 1, 0, 0,
       1, 0, 0, 0, 1, 0,
       1, 0, 0, 0, 0, 1},
      // S
      {0, 1, 1, 1, 1, 1,
       1, 0, 0, 0, 0, 0,
       1, 0, 0, 0, 0, 0,
       0, 1, 1, 1, 1, 0,
       0, 0, 0, 0, 0, 1,
       0, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 1, 1, 1, 1, 0},
      // T
      {1, 1, 1, 1, 1, 1,
       0, 0, 1, 1, 0, 0,
       0, 0, 1, 1, 0, 0,
       0, 0, 1, 1, 0, 0,
       0, 0, 1, 1, 0, 0,
       0, 0, 1, 1, 0, 0,
       0, 0, 1, 1, 0, 0,
       0, 0, 1, 1, 0, 0},
      // U
      {1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       0, 1, 1, 1, 1, 0},
      // V
      {1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       0, 1, 0, 0, 1, 0,
       0, 1, 0, 0, 1, 0,
       0, 0, 1, 1, 0, 0,
       0, 0, 1, 1, 0, 0},
      // W
      {1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 1, 1, 0, 1,
       1, 1, 0, 0, 1, 1,
       1, 0, 0, 0, 0, 1},
      // X
      {1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       0, 1, 0, 0, 1, 0,
       0, 0, 1, 1, 0, 0,
       0, 0, 1, 1, 0, 0,
       0, 1, 0, 0, 1, 0,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1},
      // Y
      {1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       1, 0, 0, 0, 0, 1,
       0, 1, 0, 0, 1, 0,
       0, 0, 1, 1, 0, 0,
       0, 0, 1, 1, 0, 0,
       0, 0, 1, 1, 0, 0,
       0, 0, 1, 1, 0, 0},
      // Z
      {1, 1, 1, 1, 1, 1,
       0, 0, 0, 0, 1, 0,
       0, 0, 0, 1, 0, 0,
       0, 0, 1, 0, 0, 0,
       0, 1, 0, 0, 0, 0,
       1, 0, 0, 0, 0, 0,
       1, 0, 0, 0, 0, 0,
       1, 1, 1, 1, 1, 1}};
};

char DotMatrixPrinter::convertToChar(string input, int index)
{
  return input[index];
}

string DotMatrixPrinter::covertToHorizontal(string input)
{
}

// void DotMatrixPrinter::printHorizontal(string input)
// {
//   vector<int> finalTranslation;
//   // convert to new string

//   int counter = 0;
//   for (int i = 0; i < 8; i++)
//   {
//     for (int j = 0; j < 6; j++)
//     {
//       if (letters[index][counter++] == 0)
//         cout << " ";
//       else
//         cout << "#";
//     }
//     cout << endl;
//   }
// }

void DotMatrixPrinter::printVertical(string input)
{
  for (int k = 0; k < input.size(); k++)
  {
    if (k > 0)
    {
      cout << endl; // Separate letters by a blank line
    }

    char currentChar = convertToChar(input, k);
    if (currentChar < 'A' || currentChar > 'Z')
    {
      cout << "Invalid input character: " << currentChar << endl;
      continue;
    }

    int index = currentChar - 'A';
    int counter = 0;
    for (int i = 0; i < 8; i++)
    {
      for (int j = 0; j < 6; j++)
      {
        if (letters[index][counter++] == 0)
          cout << " ";
        else
          cout << "#";
      }
      cout << endl;
    }
  }
}

int main()
{
  cout << "Enter text to be printed (A-Z):" << endl;
  string input;
  cin >> input;

  DotMatrixPrinter DMP;

  DMP.printVertical(input);

  cout << endl;

  // DMP.printHorizontal(input);

  return 0;
}